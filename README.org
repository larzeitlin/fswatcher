#+TITLE: File System Watcher
* Intro
This File System watcher is an extensible Clojure component for monitoring changes to
file-systems, supporting a range of file-system types (for example: local, s3). It
uses polling and a rules-based engine to trigger actions on changes. It is designed
for extensibility and configurability.

** Scope
This project lays the groundwork but it not complete. It provides a starting point to
allow for further conversation and design, development work on this project.

*** Out of scope
- Comparing across different file-systems.
- Any concept of moving or renaming files. All mutations are expressed as
  creates and deletes.

* Overview
** High-level flow

#+begin_src ascii
                +------------------+
                |   fs-watcher     |
                +------------------+
                         |
                         v
          +-------------------------------+
          |    init system from config    |
          +-------------------------------+
                         |
                         v
          +-------------------------------+
          |      Watcher Selection        |
          |       eg: local or s3         |
          +-------------------------------+
                         |
                         v
          +-------------------------------+
          |            Connect            |
          +-------------------------------+
                         |
                         v
                    +-----------+
                    |           |
                    | main loop |<----------+
                    |           |           |
                    +-----------+           |
                         |                  |
                         v                  |
          +-------------------------------+ |
          |       Poll for changes        | |
          +-------------------------------+ |
                         |                  |
                         v                  |
          +-------------------------------+ |
          |     Process file changes      | |
          |       and apply rules         | |
          +-------------------------------+ |
                         |                  |
                         v                  |
          +-------------------------------+ |
          |   Continue unless disconnect  |-+
          +-------------------------------+
                         |
                         v
          +-------------------------------+
          |          Disconnect           |
          +-------------------------------+

#+end_src

** The system
The system is a running instance of this component.

In ~fs-watcher.core~ where we have an entry-point with ~run~, which creates a system and
starts polling on a thread by using a ~future~. This keeps the REPL unblocked and also
would allow us to easily support running multiple, concurrent systems if that becomes a
requirement at a later date.

The state of the system is held in the ~system*~ atom under the key ~:fs-state~. This is
simply a set of ~java.io.File~ objects representing all the non-directory files of the
file-system as of the last poll event.

The system is updated by ~main-loop~ which triggers polls regulated configured interval.

The system is configured to use a ~watcher~ type based on the file-system type.

** Watchers
A ~FileSystemWatcher~ protocol is defined in ~fs-watcher.watcher~ with methods: ~connect~,
~poll~ and ~disconnect~. The same namespace also provides wrappers for each of these methods
so that implementations of ~FileSystemWatcher~ do not have to re-implement interactions with
the ~system*~ atom. See comments on each wrapper for more details:

[[file:src/fs_watcher/watcher.clj][FileSystemWatcher]]

Watchers are instantiated as records that implement the ~FileSystemWatcher~ protocol.
There is a watcher ~defrecord~ for each type of file-system supported. For example:

[[file:src/fs_watcher/watchers/local_filesystem.clj][LocalFileSystemWatcher]]

We can see that this implements the FileSystemWatcher protocol, using the given wrappers for
each of the methods. This is also true of the equivilant for S3

[[file:src/fs_watcher/watchers/s3.clj][S3FileSystemWatcher]]

** Rulesets and Rules
A ruleset is a collection of rules. A rule is a map of ~:condition~ and ~:action~.
both of these are functions that take the previous and new state of the file-system.

Use of, for example, ~clojure.data.diff~ can be useful in conditions and actions.
#+begin_src clojure
{:condition (fn [prev new] ...)
 :action (fn [prev new] ...)}
#+end_src

*** Condition
A predicate that compares the new and previous file-system state. If the condition is met
the action will be triggered. Comparison of the previous and new state of the file-system
gives a broad space of conditions.

**** Example: condition of a file added to a given directory
Since the previous and new state of the filesystem are represented by sets of ~java.io.File~
objects, we can check if a file belongs to a given directory by checking what the path starts
with:

#+begin_src clojure
#(string/starts-with? (.getAbsolutePath my-file) "my/important/directory")
#+end_src

We can check which files have been added by comparing the old state to the new state:

#+begin_src clojure
(let [[deleted added _] (clojure.data/diff prev-state new-state)]
;; Do something
)
#+end_src

...putting it all together into a well-formed ~:condition~ function:

#+begin_src clojure
(fn [prev-gen new-gen]
  (let [[_deleted added _] (diff prev-gen new-gen)]
    (->> added
         (filter #(string/starts-with? (.getAbsolutePath %) "my/important/directory"))
         seq)))
#+end_src

*** Action
Simply a function that is triggered when the condition is met. It also takes the previous
and new state of the file-system. 

Let's add an ~:action~ to the above ~:condition~ so we have a complete rule.
An action can be any Clojure function of the previous and new filesystem state.

#+begin_src clojure
{:condition (fn [prev-gen new-gen]
                 (let [[_deleted added _] (diff prev-gen new-gen)]
                   (->> added
                        (filter #(string/starts-with? (.getAbsolutePath %) "my/important/directory"))
                        seq)))
 :action (fn [_ _] (println "An important file was added!"))}
#+end_src

*** Rulesets
Rulesets are collection of rules.
Each ruleset has it's own namespace eg: ~fs-watcher.rulesets.ruleset1~ and then added to the map
in ~fs-watcher.rulesets~ with a keyword to refer to it.

[[file:src/fs_watcher/rulesets.clj][rulesets]]

* Configuration
Configuration is simply the ~config~ map that the entrypoint function ~run~ is called with.
It must include:
- ~:interval~ the number of miliseconds that the poller sleeps.
- ~:ruleset~ a keyword refering to the ruleset that will be applied.
- ~:watcher-type~ a keyword refering to the watcher type. This will depend on the underlying file-system.
- ~:connection-settings~ any settings the watcher needs to connect to the filesystem.
  This is determined by the watcher-type.

* Polling mechanism
We have a very simple loop and ~Thread/sleep~ polling mechaniam. 
#+begin_src clojure
(loop []
 (if (:disconnect! @system*)
   (watcher/disconnect fs)
   ;; else continue 
   (do (Thread/sleep interval)
       (watcher/poll fs)
       (recur))))  
#+end_src

There are several potential issues and oppertunities to improve this.
** Rule execution coupled to watcher/poll
These two distinct concepts should be seperated out. At the moment
the rule application is somewhat hidden.
** Polling accidentily slows down
Situations where the poll method takes a long time will cause the
poll frequency to reduce. For example large file-systems that take
a long time to read, or costly actions.
This could be mitigated by running the actions in seperate threads (using a future).
Using ~clojure.core.asyc/timeout~ rather than a loop could also help more closely
honour the configured interval but runs the risk of creating race conditions on low
interval values.

* Testing strategy
A layered approach to testing.
So far I have provided some examples of how to test. Full coverage is not completed yet.

The layers of testing are:
- unit
- integration
- system
- end-to-end

** Unit tests
These test individual functions with example data. Here we are using unit tests as much
for documentation as for ensuring correctness.

My personal preference is to avoid heavy, unnecessary unit testing,
which adds a maintenance burden. Unit tests should only be for functions that
have enough complexity to warrant further documentation or checking.

Example of unit testing is the tests for ~fs-watcher/apply-rules~ which can be found here:

[[file:test/fs_watcher/watcher_test.clj][Watcher tests]]

** Integration tests
This slightly higher level test runs over the connection between two subsystems.
Here the main integrations we are interested in are between our component and the target file-systems.
For our local file-system this is rather simple, we can check the watcher methods when pointed at a
local directory.

TODO: add local file-system integration test

We also have an example of the more complex case of the S3 watcher integration test. This is more of
a pseudo-integration test since it runs against a ~localstack~ version of S3.

[[file:test/watchers/s3_test.clj][S3 Integration tests]]

** System test
System tests run the whole system locally, testing the operation of the component as a whole using
its public interface. This could be easly achived with a script that envokes the component with a
ruleset where the actions write to an external file and then creates/deletes files in the filesystem.
Once the test is run the contents of this file can be checked against an expected output.

** End-to-end tests
End to end tests are run during CI in a deployed test environment against remote filesystems. The
actual test content could be the same as the system tests.

* CI
The continuous integration process is not yet implemented, but here is an overview of the proposed
flow. A trunk-based git workflow is assumed.

#+begin_src ascii
+----------------------------+
| Manually Run Local Tests   |
|      Before Push           |
+------------+---------------+
             |
             v
+----------------------------+
|        Push to Trunk       |
+------------+---------------+
             |
             v
+----------------------------+
|     Trigger Test Build     |
+------------+---------------+
             |
             v
+--------------+-------------+
|              | PARALLEL    |
| +------------v-----------+ |
| |     Run Unit Tests     | |
| +------------------------+ |
|              |             |
| +------------v-----------+ |
| | Run Integration Tests  | |
| +------------------------+ |
+--------------+-------------+
             |
             v
+----------------------------+
|     Run System Tests       |
+------------+---------------+
             |
             v
+----------------------------+
|       Run E2E Tests        |
+------------+---------------+
             |
             v
+----------------------------+
|    Teardown Test Env       |
+------------+---------------+
             |
             v
+----------------------------+
|      Pipeline Clear        |
|                            |
| [SUCCESS] → Deploy to Prod |
| [FAILURE] → Notify Team    |
+----------------------------+
#+end_src

** Irregular testing
We may want to use performance testing to identify the limits at which this component no
longer operates reasonably. This could be done by gradually ramping up to larger and larger
test file-systems for example.

* Evolution
This is a first pass at a generic file-system watcher component with swappable backends,
interval configuration, rule customization.
Once this is complete, there are several ways enhancement
opportunities:
- Allow for multiple concurrent systems running on the same component, each with it's own ruleset and
  other configurations.
- Remote REPL access, allowing for runtime debugging and runtime edits to configuration.

* Design decisions
** Flat hierarchy
In the current implementation a file-system is just a flat set of pathed filenames (like how S3 works).
The structure of the data does not replicate the directory hierarchy of the file-system. However, the
choice of ~java.io.File~ objects to represent the files provides a convenient interface to parts of the
filename and path should it be needed.


* Trade-offs and Improvement Opportunities
** Ruleset creation requires code changes
*** Limitation
Currently, rulesets are defined directly in code.
Adding or modifying rules necessitates a code change and redeployment,
which can slow down iteration and limit flexibility for end users.
*** Potential improvement
Develop a domain-specific language or configuration format for defining rules.
This would allow rules to be specified in external files or configuration,
empowering users to create or modify rules without touching code.
**** Trade-off
introducing a DSL could limit the expressiveness of rules or increase system complexity.
The right balance depends on the target audience and use cases

*** Impact
This approach restricts the ability of non-developers or operators to
create or adjust rules on the fly, potentially reducing the system's adaptability.

** Initial file-system representation
*** Limitation
On the first polling loop, the system transitions from an empty state to the current
file-system snapshot. This can trigger unintended rule actions,
as the initial state is not always meaningful.
*** Potential improvement
- Allow rules to distinguish between startup and steady-state polling cycles.
- Configuration to prevent actions triggering on first loop.

** Lack of State Persistence
*** Limitation
File-system state is not persisted between restarts. If the watcher is stopped, crashes or restarts
all prior state is lost.

*** Impact
Missing or duplicate actions caused by restarts.

*** Potential Improvements
Add persistent storage for the file-system state.

** More details in the file-system representation
At the moment we just use a set of ~java.io.File~ objects to represent the previous and new state of
the file-system. This is simple and convenient, but we could add more details (creation time,
edit time, file contents, more historical generations of the file-system state)
depending on requirements.

** Data Shape Enforcement
*** Limitation
There is no formal specification or validation of the shapes of rules, rulesets,
configurations, or watcher method signatures.

*** Impact
More opportunities for bugs and mistakes as the component is extended.

*** Potential Improvement
Use Clojure spec or another schema validation tool to specify and check critical
functions and data shapes.

** Generative testing
With well chosen specifications we could then use generative testing
with ~clojure.spec.test/check~ to improve unit test coverage.

** Shutdown hook
Should add a shutdown hook to ensure that ~fs-watcher.core/stop~ is called when the JVM
receives a SIGINT or SIGTERM. Just didn't get around to it.

** Error handling and logging
Handling the cases of failed connection and poll events especially is important and has
not been addressed so far in this project. Robust logging with configurable log levels
will also be needed.
